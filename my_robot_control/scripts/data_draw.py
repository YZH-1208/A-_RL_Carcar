import csv
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.cluster import KMeans
import numpy as np

def transform_coordinates(x, y):
    new_x = 2000 + x * 20
    new_y = 2000 - y * 20
    return new_x, new_y

def grid_filter(obstacles, grid_size=0.5):
    obstacles = np.array(obstacles)
    # 按照 grid_size 取整
    grid_indices = (obstacles // grid_size).astype(int)
    # 找到唯一的网格
    unique_indices = np.unique(grid_indices, axis=0)
    # 返回网格中心点
    filtered_points = unique_indices * grid_size + grid_size / 2
    return filtered_points

# Load the image
img_path = '/home/daniel/maps/my_map0924.png'  # Example image path; replace as needed
img = mpimg.imread(img_path)


before_adjust_points = [
(-5.9981, 0.0373),
(-4.9541, 0.0883),
(-3.9041, 0.238),
(-2.8692, 0.0706),
(-1.795, -0.014),
(-0.7472, 0.0682),
(0.3386, 0.4052),
(1.3931, 0.2196),
(2.4412, 0.2396),
(3.4804, 0.3771),
(4.374, 0.8319),
(5.4283, 0.9356),
(6.4876, 0.755),
(7.519, 0.5782),
(8.4967, 0.8662),
(9.5833, 0.9904),
(10.6187, 0.7665),
(11.6745, 0.4678),
(12.6693, 0.2381),
(13.6291, 0.6852),
(14.6217, 1.0718),
(15.6261, 1.223),
(16.6313, 1.5439),
(17.6389, 1.796),
(18.6388, 1.7685),
(19.7632, 1.6127),
(20.7774, 1.3655),
(21.7968, 1.1303),
(22.8133, 1.0808),
(23.7468, 1.546),
(24.6412, 2.0065),
(25.6178, 1.6027),
(26.6279, 1.5794),
(27.5867, 1.9266),
(28.5713, 2.5229),
(29.6537, 2.4866),
(30.7492, 2.2549),
(31.885, 2.2995),
(32.9137, 2.443),
(33.9134, 2.7432),
(34.9137, 2.7904),
(35.9936, 2.7904),
(37.0067, 2.7607),
(38.0432, 2.7505),
(39.084, 2.9008),
(40.1134, 3.1053),
(41.0979, 3.2912),
(42.1557, 3.5779),
(43.0711, 4.0643),
(44.0911, 4.1725),
(45.0929, 4.2637),
(46.0919, 4.1841),
(47.1219, 4.1569),
(48.1314, 4.2027),
(49.2359, 4.032),
(50.0462, 3.3761),
(51.0982, 3.3709),
(52.116, 3.5573),
(53.1663, 3.7593),
(54.2532, 3.7325),
(55.2851, 3.7474),
(56.3182, 3.7174),
(57.3358, 3.8713),
(58.3557, 4.0815),
(59.3912, 4.2949),
(60.2436, 4.8285),
(61.0865, 5.4367),
(61.1504, 6.4876),
(61.2991, 7.5874),
(60.822, 8.5094),
(60.3004, 9.3976),
(59.9093, 10.395),
(59.6417, 11.3994),
(59.6449, 12.4274),
(60.0323, 13.4182),
(60.3637, 14.4405),
(61.0688, 15.2568),
(61.1266, 16.3571),
(60.507, 17.1558),
(59.5539, 17.7128),
(58.4671, 17.726),
(57.4161, 17.9399),
(56.4553, 18.2346),
(55.4404, 18.2596),
(54.4559, 18.0278),
(53.4408, 18.0697),
(52.4147, 17.9642),
(51.4449, 17.6902),
(50.4175, 17.5029),
(49.3903, 17.3165),
(48.2762, 17.2994),
(47.2442, 17.2733),
(46.2566, 17.0195),
(45.256, 16.9218),
(44.2254, 17.1309),
(43.1292, 17.0439),
(42.1163, 17.0177),
(41.0832, 16.9881),
(40.0617, 16.973),
(39.0099, 16.7648),
(38.192, 16.1481),
(37.3538, 15.5078),
(36.3906, 15.0384),
(35.3551, 14.8316),
(34.3205, 14.7495),
(33.2391, 14.6423),
(32.2035, 14.3056),
(31.1971, 13.9802),
(30.1914, 13.7216),
(29.2072, 13.5238),
(28.1442, 13.2953),
(27.0991, 13.1873),
(26.0713, 13.1867),
(24.988, 13.2679),
(23.9441, 13.2246),
(22.8169, 12.9745),
(21.8221, 12.738),
(20.8265, 12.6243),
(19.7855, 12.7028),
(18.7164, 12.7491),
(17.6238, 12.8235),
(16.5574, 12.6029),
(15.482, 12.3979),
(14.4491, 12.1987),
(13.4017, 12.2955),
(12.3915, 12.5686),
(11.3461, 12.7579),
(10.4029, 13.1597),
(9.5549, 13.7265),
(8.9289, 14.5738),
(7.9035, 14.8127),
(6.8785, 14.7159),
(5.8735, 14.6315),
(4.8971, 14.2544),
(3.8853, 14.4418),
(2.8331, 14.1708),
(1.7304, 14.1329),
(0.7242, 14.244),
(-0.307, 14.0858),
(-1.3081, 13.9995),
(-2.274, 14.4668),
(-2.9822, 15.2199),
(-4.0285, 15.3983),
(-5.0965, 15.1253),
(-6.0324, 14.7516),
(-6.8092, 14.0132),
(-7.8255, 14.1416),
(-8.6914, 14.9093),
(-9.7374, 15.219),
(-10.7162, 14.9066),
(-11.153, 13.9561),
(-11.1989, 12.8738),
(-11.3899, 11.8853),
(-12.1174, 11.1873),
(-12.2701, 10.1051),
(-11.9859, 9.1023),
(-11.653, 8.0403),
(-11.9712, 6.969),
(-12.5498, 6.0229),
(-12.6676, 5.0105),
(-11.9328, 4.3322),
(-11.6159, 3.2518),
(-12.3436, 2.4159),
(-12.8701, 1.3675),
(-12.5514, 0.2634),
(-11.8046, -0.469),
(-10.7799, -0.322),
(-9.6229, -0.1551),
(-8.6283, -0.3267),
(-7.6332, -0.1563),
(-6.7213, -0.6003),
(-5.7215, -0.7942),
(-4.75, -0.447)
]

astar_points = [
(0.21130978806770118, 0.12084960692483915),
(1.3209880150747606, 0.11597703256104672),
(2.5466411499125363, 0.1100940824257728),
(3.9255590823753277, 0.10365420540513351),
(5.08167169662405, 0.0997816490822682),
(6.291149962293636, 0.10137318414932885),
(7.4682181028168255, 0.12480273285060792),
(8.578939425387972, 0.1637494082120489),
(9.77018814400642, 0.21240747914441857),
(10.982108122143229, 0.2693881793243707),
(12.25632155193332, 0.3334707240232635),
(13.536163939500772, 0.40081038838973543),
(14.830662127331884, 0.47587496364447496),
(16.17291678709795, 0.5621262176635792),
(17.503091401420328, 0.6492265571084858),
(18.847105327793525, 0.7382706343637107),
(20.244128699144458, 0.831141428483336),
(21.583649424920907, 0.9208779308978051),
(22.969874340583146, 1.0139286075064387),
(24.29603893431418, 1.1030470001724515),
(25.652327853400898, 1.1948448081013983),
(26.972807791968837, 1.2837869422533135),
(28.348478986031456, 1.3762120843580945),
(29.65765613490002, 1.4639632511477139),
(30.941236237937698, 1.5501052806886568),
(32.273324402687585, 1.6392760618664568),
(33.64735086940118, 1.7312724185051769),
(35.00520414771659, 1.8221105585512851),
(36.34983342850519, 1.9076274016038215),
(37.740907556396756, 1.9804729050542413),
(39.081529597728704, 2.079018310211051),
(40.43679547332605, 2.1807897262787765),
(41.826959270824965, 2.28438869163405),
(43.20175583892287, 2.3857282725965923),
(44.50664246764658, 2.480956774986112),
(45.79399877519686, 2.5712325044797963),
(47.0821310006318, 2.629929570011906),
(48.33385825199281, 2.6770751577439764),
(49.612907716716634, 2.722844260959054),
(50.91990524153882, 2.7655749143909354),
(52.29397149476253, 2.808319851512239),
(53.536743879613, 2.765791867854673),
(54.74005470328278, 2.7004183543146993),
(55.80419452804426, 2.9257747991336256),
(56.87215781484234, 3.285161134379029),
(57.95895903277099, 3.711788009425318),
(58.53655037616872, 4.718389323204155),
(58.85127241728572, 5.904260136383055),
(59.16700036798317, 7.248791152087766),
(59.30033736955487, 8.291214892652212),
(59.392056559246456, 9.361196920637925),
(59.45919186676265, 10.447650310959155),
(59.476553508893524, 11.841152649322503),
(59.48296464933296, 12.914286074072958),
(59.47969115294083, 14.071943072016841),
(59.39519088283629, 15.204874850545169),
(59.14453970395767, 16.2328261559854),
(58.446430005775596, 17.074082276200414),
(57.38798990305461, 17.221040445870592),
(56.227855904746846, 17.326299612517523),
(54.875593040265095, 17.43685631565976),
(53.50075121820237, 17.45147097315717),
(52.24792706756138, 17.395668219703513),
(51.064957065262554, 17.305643353057572),
(49.93222274703444, 17.173120167009788),
(48.823851951529754, 16.908965465916737),
(47.54975820690851, 17.112232504588853),
(46.451171603295656, 16.86861411799277),
(45.17686408475875, 16.77591646209762),
(44.1081208285612, 16.525159348005808),
(42.88364942994525, 16.54057324713038),
(41.77828863967436, 16.810616849664655),
(40.63489100816719, 16.76624693984439),
(39.56415236964928, 16.694381224464788),
(38.377760626981036, 16.488902690702766),
(37.44178817123233, 15.982361888770392),
(36.63155903130687, 15.020081600257596),
(35.86370584884682, 14.193535756213524),
(34.95395898699533, 13.584213824343117),
(33.8150027347065, 13.197300004116906),
(32.55397345790998, 12.864627331220609),
(31.32024564532723, 12.626260928308916),
(30.164459320977805, 12.457315841728374),
(29.068111329891238, 12.35732290260705),
(27.86200530544791, 12.277163851921657),
(26.59915239567297, 12.213683974264482),
(25.520347844717257, 12.162919540635583),
(24.37573384863363, 12.111836759299807),
(23.200814468677358, 12.06153438393738),
(21.93735802513757, 12.006197820068206),
(20.675770737437528, 11.95116756994184),
(19.403213531573922, 11.895523554954089),
(18.120576718256665, 11.839458377953056),
(16.802138994708034, 11.782066044965203),
(15.489362124997317, 11.726171598885138),
(14.155940267848123, 11.670134772593578),
(12.793162242507233, 11.61339176070693),
(11.693806227924629, 11.955410993238518),
(10.769467708391453, 12.587983338605119),
(9.910077049739016, 13.207678430316786),
(9.0238354730282, 13.861777831024739),
(7.742703983552903, 14.162968949005853),
(6.378672071328815, 14.207399224355944),
(5.002848538044066, 14.112351009567469),
(3.9260655510524938, 14.032565590065634),
(2.6718717799900813, 13.938044439503232),
(1.546007965841134, 13.854397077394053),
(0.2561115288768631, 13.760100260206013),
(-0.9864741166479264, 13.669829875107974),
(-2.1599340110378082, 13.600364829705658),
(-3.491928804775608, 13.588991138507518),
(-4.568882710797892, 13.64071645071891),
(-5.923890757494149, 13.715808411146485),
(-7.34038239673641, 13.787678103757253),
(-8.468582423322463, 13.82513021422474),
(-9.674337155620067, 13.695713967018882),
(-10.731061399135946, 13.209117414240387),
(-11.425988872720964, 12.344470229862043),
(-11.946477961617134, 11.280459957515827),
(-12.110021287105294, 10.049570937534964),
(-12.214073616482914, 8.77261182841746),
(-12.269059998166671, 7.547885111801272),
(-12.28447206180448, 6.38130166046967),
(-12.268653199881834, 5.231314752555877),
(-12.225219505936902, 4.00548448705922),
(-12.142250146094971, 2.7496111297012766),
(-11.549824334024182, 1.6194882056773607),
(-11.02314735437368, 0.6513887773327051),
(-10.036960864073462, -0.04842393725625852),
(-8.779096773069634, -0.34687760946276763),
(-7.7224923605211275, -0.5207222052542381),
(-6.6511862432743625, -0.4893485920699629),
(-5.599651852673805, -0.5786276659865273),
]

fig, ax = plt.subplots(figsize=(12, 8))
fig.patch.set_facecolor('white')  # 設置整個 figure 的背景為白色
ax.imshow(img)

# Read and plot data from the CSV file
csv_file = '/home/daniel/maps/wall_data.csv'  # Replace with the actual CSV path

# Attempt to read the CSV file
try:
    with open(csv_file, newline='') as file:
        reader = csv.DictReader(file)
        
        for idx, row in enumerate(reader):
            # Parse the coordinates directly, as they are already transformed
            wp_x = float(row['Waypoint X'])
            wp_y = float(row['Waypoint Y'])
            lw_x = float(row['Left Wall X'])
            lw_y = float(row['Left Wall Y'])
            rw_x = float(row['Right Wall X'])
            rw_y = float(row['Right Wall Y'])
            center_x = float(row['Center X'])
            center_y = float(row['Center Y'])

            waypoint = transform_coordinates(wp_x,wp_y)
            # waypoint = astar_points

            # Plot each point with distinct markers and colors
            # ax.plot(waypoint[0]-0.5, waypoint[1]-0.5, 'o', color='orange', markersize=1, label='Waypoint' if idx == 0 else "")
            # ax.plot(lw_x, lw_y, 'o', color='red', markersize=8, label='Left Wall' if idx == 0 else "")
            # ax.plot(rw_x, rw_y, 'o', color='blue', markersize=8, label='Right Wall' if idx == 0 else "")
            # ax.plot(center_x, center_y, 'o', color='green', markersize=8, label='Center' if idx == 0 else "")

except FileNotFoundError:
    print(f"The file at {csv_file} was not found. Please check the file path.")

x_original, y_original = zip(*before_adjust_points)
x_original = [2000+ 20 * (x-0.5) for x in x_original]
y_original = [2000- 20 * (y-0.9) for y in y_original]

ax.plot(x_original, y_original, 'o-', color='red', markersize = 2, linewidth =1, label= "Before Adjust Path")
# Plot the A* path points
x_astar, y_astar = zip(*astar_points)
# 將 astar_points 的 x 和 y 分別轉換
x_astar = [2000 + 20 * x for x in x_astar]
y_astar = [2000 - 20 * y for y in y_astar]

ax.plot(x_astar,y_astar, 'o-', color='purple', markersize=3, linewidth=2, label="A* Path")
# Add legend
ax.legend(loc='upper right')

# Remove coordinate display on plot
ax.set_xticks([])
ax.set_yticks([])

# Show the image with annotated points
plt.title("Path Visualization with A*")
plt.show()